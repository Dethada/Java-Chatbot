/*
 * Chat bot version 2.0
 */
package chatbot;

import static chatbot.music.stopped;
import static chatbot.music.songNo;
import static chatbot.music.folder;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author David
 */
public class ChatBotGUI_V2 extends javax.swing.JFrame {

    music mc = new music();
    Methods methods = new Methods();

    /**
     * Creates new form ChatBotGUI_V2
     */
    // For proper frame drag
    int xMouse;
    int yMouse;

    // for alarm clock
    String currentTime;
    String alarmTime;

    // inputs
    String input;
    String lowerCaseInput;

    public ChatBotGUI_V2() {
        initComponents();

        // Set font color
        StyledDocument doc = chatArea.getStyledDocument();
        Style style = chatArea.addStyle("This is a style", null);
        StyleConstants.setForeground(style, Color.ORANGE);

        if (mc.getProp("fileChoosen").equals("yes")) {
            Display.setText("Click the three dots to start");
        }

        // Initiate convo
        try {
            doc.insertString(doc.getLength(), "Chatbot: Hi nice to meet you I am the third generation chat bot. Do you want to listen to some music?\n", null);
        } catch (BadLocationException e) {
            System.out.println(e);
        }

        // Clock
        new Thread() {
            DateTimeFormatter date;
            DateTimeFormatter time;
            LocalDateTime currentDateTime;
            String currentDate;

            @Override
            public void run() {
                date = DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL);
                time = DateTimeFormatter.ofLocalizedTime(FormatStyle.MEDIUM);
                currentDateTime = LocalDateTime.now();
                currentTime = time.format(currentDateTime);
                currentDate = date.format(currentDateTime);

                clock.setText(time.format(currentDateTime));
                displayDate.setText(currentDate);

                try {
                    Thread.sleep(1000);
                    currentDateTime = LocalDateTime.now();
                } catch (InterruptedException e) {
                }

                if (currentTime.equals(alarmTime)) {
                    try {
                        doc.insertString(doc.getLength(), "Chatbot: Alarm rang at " + currentTime + "\n", null);
                    } catch (BadLocationException ex) {
                        Logger.getLogger(ChatBotGUI_V2.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    mc.Stop();
                    mc.Play(Paths.get(".").toAbsolutePath().normalize().toString() + "\\alarm.mp3");
                    Display.setText("Alarm ringing");
                    notiBar.setText("Alarm ringing");
                    notiBar2.setText("Alarm ringing");
                    musicStatus.setText("Alarm ringing");
                }

                if (!currentTime.equals(time.format(currentDateTime))) {
                    run();
                }
            }
        }.start();
    } // ChatBotGUI_V2()

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        homePanel = new javax.swing.JPanel();
        notiBar1 = new javax.swing.JLabel();
        miniButton1 = new javax.swing.JLabel();
        closeButton1 = new javax.swing.JLabel();
        dragFrame1 = new javax.swing.JLabel();
        home1 = new javax.swing.JLabel();
        chatbot1 = new javax.swing.JLabel();
        displayDate = new javax.swing.JLabel();
        clock = new javax.swing.JLabel();
        about1 = new javax.swing.JLabel();
        play = new javax.swing.JLabel();
        pause = new javax.swing.JLabel();
        stop = new javax.swing.JLabel();
        Display = new javax.swing.JLabel();
        next = new javax.swing.JLabel();
        previous = new javax.swing.JLabel();
        choose = new javax.swing.JLabel();
        musicStatus = new javax.swing.JLabel();
        background1 = new javax.swing.JLabel();
        chatPanel = new javax.swing.JPanel();
        notiBar = new javax.swing.JLabel();
        miniButton = new javax.swing.JLabel();
        closeButton = new javax.swing.JLabel();
        inputField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        dragFrame = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        chatArea = new javax.swing.JTextPane();
        home = new javax.swing.JLabel();
        chatbot = new javax.swing.JLabel();
        about = new javax.swing.JLabel();
        typingStatus = new javax.swing.JLabel();
        background = new javax.swing.JLabel();
        aboutPanel = new javax.swing.JPanel();
        notiBar2 = new javax.swing.JLabel();
        home2 = new javax.swing.JLabel();
        chatbot2 = new javax.swing.JLabel();
        about2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        background2 = new javax.swing.JLabel();

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Project Chatbot");
        setMinimumSize(new java.awt.Dimension(1365, 763));
        setPreferredSize(new java.awt.Dimension(1365, 763));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mainPanel.setMaximumSize(new java.awt.Dimension(1365, 763));
        mainPanel.setMinimumSize(new java.awt.Dimension(1365, 763));
        mainPanel.setPreferredSize(new java.awt.Dimension(1365, 763));
        mainPanel.setLayout(new java.awt.CardLayout());

        homePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        notiBar1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        notiBar1.setForeground(new java.awt.Color(0, 204, 204));
        notiBar1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        notiBar1.setText("Remember to key in your ATS!");
        homePanel.add(notiBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 14, 1030, 20));

        miniButton1.setToolTipText("Minimise");
        miniButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        miniButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                miniButton1MouseClicked(evt);
            }
        });
        homePanel.add(miniButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1267, 11, 40, 40));

        closeButton1.setToolTipText("Close");
        closeButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        closeButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeButton1MouseClicked(evt);
            }
        });
        homePanel.add(closeButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1319, 10, 40, 40));

        dragFrame1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        dragFrame1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                dragFrame1MouseDragged(evt);
            }
        });
        dragFrame1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                dragFrame1MousePressed(evt);
            }
        });
        homePanel.add(dragFrame1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 40));

        home1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        home1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                home1MouseReleased(evt);
            }
        });
        homePanel.add(home1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 170, 50));

        chatbot1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chatbot1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                chatbot1MouseReleased(evt);
            }
        });
        homePanel.add(chatbot1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 164, 170, 50));

        displayDate.setFont(new java.awt.Font("DS-Digital", 0, 50)); // NOI18N
        displayDate.setForeground(new java.awt.Color(255, 255, 255));
        displayDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        displayDate.setText("Sunday, 7 May, 2017");
        homePanel.add(displayDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 270, 1060, 60));

        clock.setFont(new java.awt.Font("DS-Digital", 0, 150)); // NOI18N
        clock.setForeground(new java.awt.Color(255, 255, 255));
        clock.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clock.setText("6:23:25 PM");
        homePanel.add(clock, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 50, 1070, 310));

        about1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        about1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                about1MouseReleased(evt);
            }
        });
        homePanel.add(about1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 380, 160, 50));

        play.setToolTipText("Play");
        play.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        play.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                playMouseReleased(evt);
            }
        });
        homePanel.add(play, new org.netbeans.lib.awtextra.AbsoluteConstraints(668, 511, 90, 90));

        pause.setToolTipText("Pause");
        pause.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        pause.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pauseMouseReleased(evt);
            }
        });
        homePanel.add(pause, new org.netbeans.lib.awtextra.AbsoluteConstraints(778, 530, 70, 70));

        stop.setToolTipText("Stop");
        stop.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        stop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                stopMouseReleased(evt);
            }
        });
        homePanel.add(stop, new org.netbeans.lib.awtextra.AbsoluteConstraints(589, 539, 60, 60));

        Display.setFont(new java.awt.Font("Serif", 0, 36)); // NOI18N
        Display.setForeground(new java.awt.Color(255, 255, 255));
        Display.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Display.setText("Open your music folder to play songs");
        homePanel.add(Display, new org.netbeans.lib.awtextra.AbsoluteConstraints(411, 423, 600, 50));

        next.setToolTipText("Next");
        next.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        next.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                nextMouseReleased(evt);
            }
        });
        homePanel.add(next, new org.netbeans.lib.awtextra.AbsoluteConstraints(864, 552, 60, 40));

        previous.setToolTipText("Previous");
        previous.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        previous.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                previousMouseReleased(evt);
            }
        });
        homePanel.add(previous, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 550, 60, 40));

        choose.setToolTipText("Select your music directory");
        choose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        choose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                chooseMouseReleased(evt);
            }
        });
        homePanel.add(choose, new org.netbeans.lib.awtextra.AbsoluteConstraints(952, 560, 50, 30));

        musicStatus.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        musicStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        musicStatus.setText("Not playing");
        homePanel.add(musicStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 610, 170, -1));

        background1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chatbot/chatbothome.png"))); // NOI18N
        background1.setMaximumSize(new java.awt.Dimension(10, 10));
        background1.setMinimumSize(new java.awt.Dimension(10, 10));
        background1.setPreferredSize(new java.awt.Dimension(10, 10));
        homePanel.add(background1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -350, 1820, 1460));

        mainPanel.add(homePanel, "card3");

        chatPanel.setMaximumSize(new java.awt.Dimension(1365, 763));
        chatPanel.setMinimumSize(new java.awt.Dimension(1365, 763));
        chatPanel.setPreferredSize(new java.awt.Dimension(1365, 763));
        chatPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        notiBar.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        notiBar.setForeground(new java.awt.Color(0, 204, 204));
        notiBar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        notiBar.setText("Remember to key in your ATS!");
        chatPanel.add(notiBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 14, 1030, 20));

        miniButton.setToolTipText("Minimise");
        miniButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        miniButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                miniButtonMouseClicked(evt);
            }
        });
        chatPanel.add(miniButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1267, 11, 40, 40));

        closeButton.setToolTipText("Close");
        closeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeButtonMouseClicked(evt);
            }
        });
        chatPanel.add(closeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1319, 10, 40, 40));

        inputField.setBackground(new java.awt.Color(4, 4, 4));
        inputField.setFont(new java.awt.Font("SansSerif", 0, 28)); // NOI18N
        inputField.setForeground(new java.awt.Color(233, 202, 6));
        inputField.setCaretColor(new java.awt.Color(255, 255, 255));
        inputField.setFocusCycleRoot(true);
        inputField.setNextFocusableComponent(sendButton);
        inputField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputFieldKeyPressed(evt);
            }
        });
        chatPanel.add(inputField, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 630, 990, 50));

        sendButton.setBackground(new java.awt.Color(105, 105, 105));
        sendButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chatbot/Chat-48.png"))); // NOI18N
        sendButton.setToolTipText("Click to send");
        sendButton.setOpaque(false);
        sendButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendButtonMouseClicked(evt);
            }
        });
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });
        chatPanel.add(sendButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 630, 90, 50));

        dragFrame.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        dragFrame.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                dragFrameMouseDragged(evt);
            }
        });
        dragFrame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                dragFrameMousePressed(evt);
            }
        });
        chatPanel.add(dragFrame, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 40));

        jScrollPane2.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 204, 204)));
        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setFocusable(false);
        jScrollPane2.setNextFocusableComponent(inputField);
        jScrollPane2.setRequestFocusEnabled(false);

        chatArea.setEditable(false);
        chatArea.setBackground(new java.awt.Color(4, 4, 4));
        chatArea.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        chatArea.setFont(new java.awt.Font("SansSerif", 0, 28)); // NOI18N
        chatArea.setForeground(new java.awt.Color(70, 173, 212));
        chatArea.setFocusCycleRoot(false);
        chatArea.setFocusable(false);
        chatArea.setRequestFocusEnabled(false);
        jScrollPane2.setViewportView(chatArea);

        chatPanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, 1090, 460));

        home.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        home.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                homeMouseReleased(evt);
            }
        });
        chatPanel.add(home, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 170, 50));

        chatbot.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chatbot.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                chatbotMouseReleased(evt);
            }
        });
        chatPanel.add(chatbot, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 164, 170, 50));

        about.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        about.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                aboutMouseReleased(evt);
            }
        });
        chatPanel.add(about, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 380, 160, 50));

        typingStatus.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        typingStatus.setForeground(new java.awt.Color(70, 173, 212));
        typingStatus.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        chatPanel.add(typingStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 550, 280, 60));

        background.setForeground(new java.awt.Color(255, 255, 255));
        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chatbot/chatbotbgV2.png"))); // NOI18N
        background.setMaximumSize(new java.awt.Dimension(10, 10));
        background.setMinimumSize(new java.awt.Dimension(10, 10));
        background.setPreferredSize(new java.awt.Dimension(10, 10));
        chatPanel.add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -350, 1820, 1460));

        mainPanel.add(chatPanel, "card2");

        aboutPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        notiBar2.setFont(new java.awt.Font("Serif", 0, 18)); // NOI18N
        notiBar2.setForeground(new java.awt.Color(0, 204, 204));
        notiBar2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        notiBar2.setText("Remember to key in your ATS!");
        aboutPanel.add(notiBar2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 14, 1030, 20));

        home2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        home2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                home2MouseReleased(evt);
            }
        });
        aboutPanel.add(home2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 170, 50));

        chatbot2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chatbot2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                chatbot2MouseReleased(evt);
            }
        });
        aboutPanel.add(chatbot2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 164, 170, 50));

        about2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        aboutPanel.add(about2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 380, 160, 50));

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Developer Information & Credits");
        aboutPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 60, 700, 90));

        background2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chatbot/chatbotbgV2.png"))); // NOI18N
        background2.setMaximumSize(new java.awt.Dimension(10, 10));
        background2.setMinimumSize(new java.awt.Dimension(10, 10));
        background2.setPreferredSize(new java.awt.Dimension(10, 10));
        aboutPanel.add(background2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -350, 1820, 1460));

        mainPanel.add(aboutPanel, "card4");

        getContentPane().add(mainPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1360, 760));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseClicked
        System.exit(0);
    }//GEN-LAST:event_closeButtonMouseClicked

    private void miniButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_miniButtonMouseClicked
        this.setState(ChatBotGUI_V2.ICONIFIED);
    }//GEN-LAST:event_miniButtonMouseClicked

    private void dragFrameMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dragFrameMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();

        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_dragFrameMouseDragged

    private void dragFrameMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dragFrameMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_dragFrameMousePressed

    private void sendButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendButtonMouseClicked
        inputFunction();
    }//GEN-LAST:event_sendButtonMouseClicked

    private void inputFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            inputFunction();
        }
    }//GEN-LAST:event_inputFieldKeyPressed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // Leave blank
    }//GEN-LAST:event_sendButtonActionPerformed

    private void miniButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_miniButton1MouseClicked
        this.setState(ChatBotGUI_V2.ICONIFIED);
    }//GEN-LAST:event_miniButton1MouseClicked

    private void closeButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButton1MouseClicked
        System.exit(0);
    }//GEN-LAST:event_closeButton1MouseClicked

    private void dragFrame1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dragFrame1MouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();

        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_dragFrame1MouseDragged

    private void dragFrame1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dragFrame1MousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_dragFrame1MousePressed

    private void homeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeMouseReleased
        mainPanel.removeAll();
        mainPanel.repaint();
        mainPanel.revalidate();

        mainPanel.add(homePanel);
        mainPanel.repaint();
        mainPanel.revalidate();
    }//GEN-LAST:event_homeMouseReleased

    private void chatbotMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chatbotMouseReleased
        mainPanel.removeAll();
        mainPanel.repaint();
        mainPanel.revalidate();

        mainPanel.add(chatPanel);
        mainPanel.repaint();
        mainPanel.revalidate();
    }//GEN-LAST:event_chatbotMouseReleased

    private void chatbot1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chatbot1MouseReleased
        mainPanel.removeAll();
        mainPanel.repaint();
        mainPanel.revalidate();

        mainPanel.add(chatPanel);
        mainPanel.repaint();
        mainPanel.revalidate();
    }//GEN-LAST:event_chatbot1MouseReleased

    private void home1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_home1MouseReleased
        mainPanel.removeAll();
        mainPanel.repaint();
        mainPanel.revalidate();

        mainPanel.add(homePanel);
        mainPanel.repaint();
        mainPanel.revalidate();
    }//GEN-LAST:event_home1MouseReleased

    private void home2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_home2MouseReleased
        mainPanel.removeAll();
        mainPanel.repaint();
        mainPanel.revalidate();

        mainPanel.add(homePanel);
        mainPanel.repaint();
        mainPanel.revalidate();
    }//GEN-LAST:event_home2MouseReleased

    private void chatbot2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chatbot2MouseReleased
        mainPanel.removeAll();
        mainPanel.repaint();
        mainPanel.revalidate();

        mainPanel.add(chatPanel);
        mainPanel.repaint();
        mainPanel.revalidate();
    }//GEN-LAST:event_chatbot2MouseReleased

    private void about1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_about1MouseReleased
        mainPanel.removeAll();
        mainPanel.repaint();
        mainPanel.revalidate();

        mainPanel.add(aboutPanel);
        mainPanel.repaint();
        mainPanel.revalidate();
    }//GEN-LAST:event_about1MouseReleased

    private void aboutMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutMouseReleased
        mainPanel.removeAll();
        mainPanel.repaint();
        mainPanel.revalidate();

        mainPanel.add(aboutPanel);
        mainPanel.repaint();
        mainPanel.revalidate();
    }//GEN-LAST:event_aboutMouseReleased

    private void stopMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopMouseReleased
        mc.Stop();
        stopped = true;
    }//GEN-LAST:event_stopMouseReleased

    private void playMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playMouseReleased
        try {
            mc.Resume();
        } catch (IOException ex) {
            Logger.getLogger(ChatBotGUI_V2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_playMouseReleased

    private void pauseMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pauseMouseReleased
        mc.Pause();
    }//GEN-LAST:event_pauseMouseReleased

    private void chooseMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chooseMouseReleased
        mc.chooseDir();
    }//GEN-LAST:event_chooseMouseReleased

    private void nextMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextMouseReleased
        mc.Stop();
        mc.next();
    }//GEN-LAST:event_nextMouseReleased

    private void previousMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_previousMouseReleased
        if (songNo > 0) {
            mc.Stop();
            mc.prev();
        }
    }//GEN-LAST:event_previousMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatBotGUI_V2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            // Splash screen time
            try {
                Thread.sleep(800);
            } catch (InterruptedException e) {
            }
            ChatBotGUI_V2 frame = new ChatBotGUI_V2();
            frame.setVisible(true);
            // set icon
            frame.setIconImage(Toolkit.getDefaultToolkit().getImage(System.getProperty("user.dir") + "\\test\\icon.png"));
        });
    }

    public void inputFunction() {
        try {
            StyledDocument doc = chatArea.getStyledDocument();
            Style style = chatArea.addStyle("I'm a style", null);
            StyleConstants.setForeground(style, Color.ORANGE);
            
            // Get input
            input = inputField.getText();
            lowerCaseInput = input.toLowerCase();
            
            // Display input
            doc.insertString(doc.getLength(), "You: " + input + "\n", style);
            
            
            if (lowerCaseInput.contains("set alarm")) {
                alarmTime = input.substring(10);
                doc.insertString(doc.getLength(), "Chatbot: Alarm set at " + alarmTime + "\n", null);
            } else if (lowerCaseInput.contains("encode")) {
                String value = input.substring(7);
                doc.insertString(doc.getLength(), "Chatbot: " + methods.Decimal2Bin(value) + "\n", null);
            } else if (lowerCaseInput.contains("decode")) {
                // decode 0110 2
                String v1, v2;
                v1 = input.substring(7, input.length() - 2);
                v2 = input.substring(input.length() - 1);
                doc.insertString(doc.getLength(), "Chatbot: " + v1 + " converted to base 10 is " + methods.decode(v1, v2) + "\n", null);
            } else {
                try {
                    chatbot();
                } catch (InterruptedException | BadLocationException ex) {
                    Logger.getLogger(ChatBotGUI_V2.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            // clear input text field
            inputField.setText("");
            inputField.requestFocus();
        } catch (BadLocationException ex) {
            Logger.getLogger(ChatBotGUI_V2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void chatbot() throws InterruptedException, BadLocationException {
        // Get file directories
        String fileGreetings = System.getProperty("user.dir") + "\\replies\\greetings.txt";
        String fileJokes = System.getProperty("user.dir") + "\\replies\\jokes.txt";

        // Initialize the objects
        Random randomGenerator = new Random();
        StyledDocument doc = chatArea.getStyledDocument();
        Style style = chatArea.addStyle("I'm a style", null);
        StyleConstants.setForeground(style, Color.ORANGE);
        DateTimeFormatter date = DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL);
        DateTimeFormatter time = DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT);
        LocalDateTime currentDateTime = LocalDateTime.now();
        ArrayList<String> greetings = new ArrayList<>();
        ArrayList<String> jokes = new ArrayList<>();

        // Replies
        String help = "Bot:    Commands avaliable\n"
                + "----------------------------------------------------\n"
                + "help\t\t\t\t\t\t- Displays this message\n"
                + "clear\t\t\t\t\t\t- Clears the screen\n"
                + "date time\t\t\t\t\t- Shows the current date and time\n"
                + "date\t\t\t\t\t\t- Shows today's date\n"
                + "time\t\t\t\t\t\t- Shows the current time\n"
                + "encode\t\t\t\t\t- Converts decimal number to bnary/hex\n"
                + "decode <bin/hex> <base>\t\t- Converts a binnary/hex to decimal\n"
                + "coin flip\t\t\t\t\t- Flips a coin\n"
                + "joke\t\t\t\t\t\t- Tells a joke\n"
                + "mc dir\t\t\t\t\t- Choose your music directory\n"
                + "mc stop\t\t\t\t\t- Stops the music\n"
                + "mc pause\t\t\t\t\t- Pause the music\n"
                + "mc resume\t\t\t\t\t- Resume the music\n"
                + "mc next\t\t\t\t\t- Plays the next song\n"
                + "mc prev\t\t\t\t\t- Plays the previous song\n"
                + "alarm\t\t\t\t\t\t- Displays any alarm set\n"
                + "set alarm 00:00:00 AM/PM\t\t- Set at entered time\n"
                + "dismiss alarm\t\t\t\t- Dismiss any alarm set\n"
                + "exit\t\t\t\t\t\t- Exits the program\n";
        String[] defaultReply = {"I do not understand what you are saying", "Can you please rephrase?", "I don't understand", "I'm not sure i get what you mean",
            "Are you speaking english?"};
        String[] goodbye = {"Okay bye~", "See you again", "Goodbye"};

        new Thread() {
            @Override
            public void run() {
                try {
                    // Read replies from file for greetings
                    try {

                        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(fileGreetings)));
                        String line;

                        while ((line = br.readLine()) != null) {
                            greetings.add(line);
                        }
                        br.close();

                    } catch (IOException e) {
                        System.out.println("ERROR: unable to read file " + fileGreetings);
                    }

                    // Read replies from file for jokes
                    try {

                        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(fileJokes)));
                        String line;

                        while ((line = br.readLine()) != null) {
                            jokes.add(line);
                        }
                        br.close();

                    } catch (IOException e) {
                        System.out.println("ERROR: unable to read file " + fileGreetings);
                    }

                    // Send replies
                    switch (lowerCaseInput) {
                        // Commands
                        case "exit":
                            mc.Stop();
                            System.exit(0);
                            break;
                        case "clear":
                            chatArea.setText("");
                            break;
                        case "help":
                            doc.insertString(doc.getLength(), help, null);
                            break;
                        case "date time":
                        case "date and time":
                            doc.insertString(doc.getLength(), "Chatbot: Today is " + date.format(currentDateTime) + " and the time now is " + time.format(currentDateTime) + "\n", null);
                            break;
                        case "date":
                        case "what is the date":
                            doc.insertString(doc.getLength(), "Chatbot: Today is " + date.format(currentDateTime) + "\n", null);
                            break;
                        case "time":
                        case "what is the time now":
                            doc.insertString(doc.getLength(), "Chatbot: The time now is " + time.format(currentDateTime) + "\n", null);
                            break;
                        case "coin flip":
                            doc.insertString(doc.getLength(), "Chatbot: " + methods.coinFlip() + "\n", null);
                            break;
                        case "mc resume":
                            mc.Resume();
                            doc.insertString(doc.getLength(), "Chatbot: Music resumed\n", null);
                            break;
                        case "mc stop":
                            mc.Stop();
                            stopped = true;
                            doc.insertString(doc.getLength(), "Chatbot: Music stopped\n", null);
                            break;
                        case "mc pause":
                            mc.Pause();
                            doc.insertString(doc.getLength(), "Chatbot: Music paused\n", null);
                            break;
                        case "mc next":
                            mc.Stop();
                            mc.next();
                            doc.insertString(doc.getLength(), "Chatbot: Playing next song\n", null);
                            break;
                        case "mc prev":
                            if (songNo > 0) {
                                mc.Stop();
                                mc.prev();
                                doc.insertString(doc.getLength(), "Chatbot: Playing previous song\n", null);
                            } else {
                                doc.insertString(doc.getLength(), "Chatbot: No previous song\n", null);
                            }
                            break;
                        case "mc dir":
                            mc.chooseDir();
                            doc.insertString(doc.getLength(), "Chatbot: Music directory choosen " + folder + "\n", null);
                            break;
                        case "uv":
                            doc.insertString(doc.getLength(), methods.getData(), null);
                            break;
                        case "alarm":
                            if (!alarmTime.equals("")) {
                                doc.insertString(doc.getLength(), "Chatbot: Alarm set at " + alarmTime + "\n", null);
                            } else {
                                doc.insertString(doc.getLength(), "Chatbot: No alarm set\n", null);
                            }
                            break;
                        case "dismiss alarm":
                            mc.Stop();
                            alarmTime = "";
                            doc.insertString(doc.getLength(), "Chatbot: Alarm dismissed\n", null);
                            break;
                        case "change dir":
                            mc.changeDir();
                            doc.insertString(doc.getLength(), "Chatbot: Music directory changed\n", null);
                            break;
                        // Convos
                        case "bye":
                            typingStatus.setText("Chatbot is typing...");
                            Thread.sleep(randomGenerator.nextInt(251) + 500);
                            typingStatus.setText("");
                            doc.insertString(doc.getLength(), "Chatbot: " + goodbye[randomGenerator.nextInt(goodbye.length)] + "\n", null);
                            break;
                        case "okay":
                            typingStatus.setText("Chatbot is typing...");
                            Thread.sleep(randomGenerator.nextInt(251) + 500);
                            typingStatus.setText("");
                            doc.insertString(doc.getLength(), "Chatbot: Okay\n", null);
                            break;
                        // Questions
                        case "what is your name":
                            typingStatus.setText("Chatbot is typing...");
                            Thread.sleep(randomGenerator.nextInt(251) + 500);
                            typingStatus.setText("");
                            doc.insertString(doc.getLength(), "Chatbot: I don't have a name I'm just called Chatbot\n", null);
                            break;
                        // Greetings
                        case "hey":
                        case "sup":
                        case "hello":
                        case "hi":
                            typingStatus.setText("Chatbot is typing...");
                            Thread.sleep(randomGenerator.nextInt(251) + 500);
                            typingStatus.setText("");
                            doc.insertString(doc.getLength(), "Chatbot: " + greetings.get(randomGenerator.nextInt(greetings.size())) + "\n", null);
                            break;
                        // Nice stuff
                        case "sorry":
                            typingStatus.setText("Chatbot is typing...");
                            Thread.sleep(randomGenerator.nextInt(251) + 500);
                            typingStatus.setText("");
                            doc.insertString(doc.getLength(), "Chatbot: Naww don't be!\n", null);
                            break;
                        case "i love you":
                            typingStatus.setText("Chatbot is typing...");
                            Thread.sleep(randomGenerator.nextInt(501) + 500);
                            typingStatus.setText("");
                            doc.insertString(doc.getLength(), "Chatbot: Aww love you too <3\n", null);
                            break;
                        case "how are you doing":
                        case "how are you":
                            typingStatus.setText("Chatbot is typing...");
                            Thread.sleep(randomGenerator.nextInt(251) + 500);
                            typingStatus.setText("");
                            doc.insertString(doc.getLength(), "Chatbot: I'm doing well thankyou\n", null);
                            break;
                        case "thanks":
                        case "thx":
                            typingStatus.setText("Chatbot is typing...");
                            Thread.sleep(randomGenerator.nextInt(251) + 500);
                            typingStatus.setText("");
                            doc.insertString(doc.getLength(), "Chatbot: No problem!\n", null);
                            break;
                        // Misc
                        case "joke":
                        case "tell me a joke":
                            typingStatus.setText("Chatbot is typing...");
                            Thread.sleep(randomGenerator.nextInt(501) + 500);
                            typingStatus.setText("");
                            doc.insertString(doc.getLength(), "Chatbot: " + jokes.get(randomGenerator.nextInt(jokes.size())) + "\n", null);
                            break;
                        default:
                            typingStatus.setText("Chatbot is typing...");
                            Thread.sleep(randomGenerator.nextInt(1001) + 500);
                            typingStatus.setText("");
                            doc.insertString(doc.getLength(), "Chatbot: " + defaultReply[randomGenerator.nextInt(defaultReply.length)] + "\n", null);
                            break;
                    } // switch
                } catch (InterruptedException | BadLocationException | IOException ex) {
                    Logger.getLogger(ChatBotGUI_V2.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    } // chatbot()

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JLabel Display;
    private javax.swing.JLabel about;
    private javax.swing.JLabel about1;
    private javax.swing.JLabel about2;
    private javax.swing.JPanel aboutPanel;
    private javax.swing.JLabel background;
    private javax.swing.JLabel background1;
    private javax.swing.JLabel background2;
    private javax.swing.JTextPane chatArea;
    private javax.swing.JPanel chatPanel;
    private javax.swing.JLabel chatbot;
    private javax.swing.JLabel chatbot1;
    private javax.swing.JLabel chatbot2;
    private javax.swing.JLabel choose;
    public static javax.swing.JLabel clock;
    private javax.swing.JLabel closeButton;
    private javax.swing.JLabel closeButton1;
    private javax.swing.JLabel displayDate;
    private javax.swing.JLabel dragFrame;
    private javax.swing.JLabel dragFrame1;
    private javax.swing.JLabel home;
    private javax.swing.JLabel home1;
    private javax.swing.JLabel home2;
    private javax.swing.JPanel homePanel;
    private javax.swing.JTextField inputField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel miniButton;
    private javax.swing.JLabel miniButton1;
    public static javax.swing.JLabel musicStatus;
    private javax.swing.JLabel next;
    public static javax.swing.JLabel notiBar;
    public static javax.swing.JLabel notiBar1;
    public static javax.swing.JLabel notiBar2;
    private javax.swing.JLabel pause;
    private javax.swing.JLabel play;
    private javax.swing.JLabel previous;
    private javax.swing.JButton sendButton;
    private javax.swing.JLabel stop;
    private javax.swing.JLabel typingStatus;
    // End of variables declaration//GEN-END:variables
}
